---
import { getCollection, getEntryBySlug } from "astro:content";

import Layout from "~/layouts/Layout.astro";

import LinkButton from "~/components/global/LinkButton.astro";
import Tree from "~/components/project/Tree.astro";
import TLDR from "~/components/project/TLDR.astro";

import globe from "~/assets/icons/globe.svg";
import Callout from "~/components/project/Callout.astro";
import IconPill from "~/components/global/IconPill.vue";

export async function getStaticPaths() {
  const projects = await getCollection("projects", ({ data }) => {
  return data.enabled;
});

  return projects.map((x) => ({ params: { project: x.slug } }));
}

const { project: projectSlug } = Astro.params;

const project = await getEntryBySlug("projects", projectSlug);

const {
  data: { tech },
} = await getEntryBySlug("categories", "tech");

const icons = (await Astro.glob("~/assets/icons/*.svg")).map(
  (x) => x.default.src
);

const techWithIcons = await Promise.all(
  await project.data.tags.map(async (techSlug) => {
    const techItem = tech.find((x) => x.slug === techSlug);

    return {
      ...techItem,
      icon: icons.find((x) => x.includes(techItem.icon)),
    };
  })
);

const { Content } = await project.render();
---

<Layout title={project.data.title} ogImage={`${import.meta.env.SITE_URL}/open-graph/projects/${project.slug}.png`} description={project.data.subtitle}>
  <article class="project">
    <header>
      <p class="when">{project.data.when}</p>
      <h1>{project.data.title}</h1>
      <ul class="tags">
        {
          techWithIcons.map((item, index) => (
            <li class="tag">
              <IconPill
                label={item.name}
                icon={item.icon}
                colour={item.colour}
                id={`project-tech-${index}`}
              />
            </li>
          ))
        }
      </ul>
      <!-- <div class="stack">
      {project.data.stack ? <Tree tree={project.data.stack} /> : null}
    </div> -->

      {project.data.tldr && (
            <div class="info">
              <TLDR text={project.data.tldr} />
              <!-- <Callout>Tags</Callout> -->
            </div>
      )}

      {
        project.data.link && (
          <div class="link">
            <LinkButton
              label="check it out"
              url={project.data.link}
              icon={globe}
            />
          </div>
        )
      }
    </header>

    <section class="content">
      <Content />
    </section>
  </article>
</Layout>

<style lang="scss" is:global>
  .content {
    h2 {
      @include section-title;

      &:not(:first-of-type) {
        margin-top: $spacing-lg;
      }
    }
    h3 {
      @include section-subtitle;
    }
    p {
      margin-bottom: $spacing-sm;
      max-width: 50ch;

      a {
        @include highlight-link;
      }
    }
  }
</style>

<style lang="scss">
  .project {
    font-size: 16px;
    font-weight: 300;

    @include breakpoint(sm) {
      font-size: 20px;
    }
  }
  .when {
    color: gray;
    font-size: 0.5rem;
    margin-left: 0.25em;
    margin-bottom: 0.25rem;
    // font-weight: 500;
  }
  .stack {
    // margin-bottom: $spacing-lg;
  }
  header {
    margin-bottom: $spacing-md;
  }
  h1 {
    font-size: 1rem;
    font-weight: normal;
    margin-bottom: 0.5rem !important;

    @include breakpoint(sm) {
      font-size: 1.5rem;
    }

    @include breakpoint(md) {
      font-size: 1.6rem;
    }
    @include breakpoint(lg) {
      font-size: 2rem;
    }
  }
  .info {
    // display: grid;
    // grid-template-columns: 1fr 1fr;
    // gap: 1rem;

    margin-bottom: $spacing-md;

    &:last-child {
      margin-bottom: $spacing-lg;
    }
  }
  .tags {
    display: flex;
    gap: $spacing-xs;
    margin-bottom: 3rem;
    font-size: 0.75rem;

    @include breakpoint(sm) {
      font-size: 1rem;
    }
  }
  .link {
    margin-bottom: $spacing-md;
  }
</style>
